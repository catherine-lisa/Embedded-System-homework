; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --split_sections --debug -c -S -o.\objects\main.s --depend=.\objects\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\RTE\Device\STM32F103RB -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\MDK-Middleware\7.13.0\Board -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_MD --omf_browse=.\objects\main.crf main.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||i.core_dump||, CODE, READONLY, ALIGN=2

        REQUIRE _printf_percent
        REQUIRE _printf_p
        REQUIRE _printf_longlong_hex
        REQUIRE _printf_pre_padding
        REQUIRE _printf_flags
        REQUIRE _printf_widthprec
        REQUIRE _printf_x
core_dump PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        MOV      r1,r4
        ADR      r0,|L0.240|
        BL       __2printf
        ADR      r0,|L0.264|
        BL       __2printf
        ADR      r0,|L0.272|
        LDR      r1,[r4,#0x20]
        BL       __2printf
        ADR      r0,|L0.280|
        BL       __2printf
        ADR      r0,|L0.272|
        LDR      r1,[r4,#0x24]
        BL       __2printf
        ADR      r0,|L0.288|
        BL       __2printf
        ADR      r0,|L0.272|
        LDR      r1,[r4,#0x28]
        BL       __2printf
        ADR      r0,|L0.296|
        BL       __2printf
        ADR      r0,|L0.272|
        LDR      r1,[r4,#0x2c]
        BL       __2printf
        ADR      r0,|L0.304|
        BL       __2printf
        ADR      r0,|L0.312|
        LDR      r1,[r4,#0]
        BL       __2printf
        ADR      r0,|L0.320|
        BL       __2printf
        ADR      r0,|L0.272|
        LDR      r1,[r4,#4]
        BL       __2printf
        ADR      r0,|L0.328|
        BL       __2printf
        ADR      r0,|L0.272|
        LDR      r1,[r4,#8]
        BL       __2printf
        ADR      r0,|L0.336|
        BL       __2printf
        ADR      r0,|L0.272|
        LDR      r1,[r4,#0xc]
        BL       __2printf
        ADR      r0,|L0.344|
        BL       __2printf
        ADR      r0,|L0.272|
        LDR      r1,[r4,#0x10]
        BL       __2printf
        ADR      r0,|L0.352|
        BL       __2printf
        ADR      r0,|L0.312|
        LDR      r1,[r4,#0x14]
        BL       __2printf
        ADR      r0,|L0.360|
        BL       __2printf
        ADR      r0,|L0.272|
        LDR      r1,[r4,#0x18]
        BL       __2printf
        ADR      r0,|L0.368|
        BL       __2printf
        ADR      r0,|L0.272|
        LDR      r1,[r4,#0x1c]
        BL       __2printf
        ADR      r0,|L0.376|
        BL       __2printf
        ADR      r0,|L0.312|
        LDR      r1,[r4,#0x30]
        BL       __2printf
        ADR      r0,|L0.384|
        BL       __2printf
        ADR      r0,|L0.272|
        LDR      r1,[r4,#0x34]
        BL       __2printf
        ADR      r0,|L0.392|
        BL       __2printf
        ADR      r0,|L0.272|
        LDR      r1,[r4,#0x38]
        BL       __2printf
        ADR      r0,|L0.400|
        BL       __2printf
        ADR      r0,|L0.312|
        LDR      r1,[r4,#0x3c]
        BL       __2printf
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L0.240|
        DCB      "exception frame at %p\n",0
        DCB      0
|L0.264|
        DCB      "r0  0x",0
        DCB      0
|L0.272|
        DCB      "%08x  ",0
        DCB      0
|L0.280|
        DCB      "r1  0x",0
        DCB      0
|L0.288|
        DCB      "r2  0x",0
        DCB      0
|L0.296|
        DCB      "r3  0x",0
        DCB      0
|L0.304|
        DCB      "r4  0x",0
        DCB      0
|L0.312|
        DCB      "%08x\n",0
        DCB      0
        DCB      0
|L0.320|
        DCB      "r5  0x",0
        DCB      0
|L0.328|
        DCB      "r6  0x",0
        DCB      0
|L0.336|
        DCB      "r7  0x",0
        DCB      0
|L0.344|
        DCB      "r8  0x",0
        DCB      0
|L0.352|
        DCB      "r9  0x",0
        DCB      0
|L0.360|
        DCB      "r10 0x",0
        DCB      0
|L0.368|
        DCB      "r11 0x",0
        DCB      0
|L0.376|
        DCB      "r12 0x",0
        DCB      0
|L0.384|
        DCB      "lr  0x",0
        DCB      0
|L0.392|
        DCB      "pc  0x",0
        DCB      0
|L0.400|
        DCB      "psr 0x",0
        DCB      0

        AREA ||i.main||, CODE, READONLY, ALIGN=1

main PROC
        BL       trigger_unaligned_mem_access
        NOP      
|L1.6|
        B        |L1.6|
        ENDP


        AREA ||i.trigger_unaligned_mem_access||, CODE, READONLY, ALIGN=2

trigger_unaligned_mem_access PROC
        PUSH     {r3-r5,lr}
        LDR      r4,|L2.36|
        LDR      r0,[r4,#0]
        ORR      r0,r0,#8
        STR      r0,[r4,#0]
        ISB      
        MOVS     r0,#1
        STR      r0,[sp,#0]
        ADD      r5,sp,#1
        MOVS     r0,#2
        STR      r0,[r5,#0]
        ADR      r0,|L2.40|
        BL       __2printf
        POP      {r3-r5,pc}
        ENDP

|L2.36|
        DCD      0xe000ed14
|L2.40|
        DCB      "trap UNALIGN_TRP",0
        DCB      0
        DCB      0
        DCB      0

        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "main.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |HardFault_Handler|
#line 67
|HardFault_Handler| PROC
#line 68

 
 PUSH {R11}
 PUSH {R10}
 PUSH {R9}
 PUSH {R8}
 PUSH {R7}
 PUSH {R6}
 PUSH {R5}
 PUSH {R4}
 MOV R0, SP
 BL core_dump
	ENDP

;*** End   embedded assembler ***

__ARM_use_no_argv EQU 0

        EXPORT __ARM_use_no_argv
        EXPORT core_dump [CODE]
        EXPORT main [CODE]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT _printf_percent [CODE]
        IMPORT _printf_p [CODE]
        IMPORT _printf_longlong_hex [CODE]
        IMPORT __2printf [CODE]
        IMPORT _printf_pre_padding [CODE]
        IMPORT _printf_flags [CODE]
        IMPORT _printf_widthprec [CODE]
        IMPORT _printf_x [CODE]

        KEEP trigger_unaligned_mem_access

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,6
        ATTR SETSTRING Tag_conformance,"2.09"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
